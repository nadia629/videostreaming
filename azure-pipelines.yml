trigger:
  - main

variables:
  azureSubscription: 'ac3b4843-6c84-4ba2-b436-7680459da5f1'
  webAppName: "netflix-app"
  environmentName: "netflix"
  vmImageName: 'ubuntu-latest'

stages:
  - stage: Build
    displayName: Build stage
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)
          
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '16.x'
            displayName: 'Install Node.js'

          - script: |
              npm install
              npm run build --if-present
              npm run test --if-present
            displayName: 'npm install, build and test'

          - task: ArchiveFiles@2
            displayName: 'Archive files'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true

          - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            artifact: drop

  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: Deploy
        displayName: Deploy
        environment: $(environmentName)
        pool:
          vmImage: $(vmImageName)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: 'Azure Web App Deploy: '
                  inputs:
                    azureSubscription: $(azureSubscription)
                    appType: webAppLinux
                    appName: $(webAppName)
                    runtimeStack: 'NODE|16.x'
                    package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
                    startUpCommand: 'npm run start'

                - task: AzureCLI@2
                  inputs:
                    azureSubscription: $(azureSubscription)
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      # Navigate to the deployment folder
                      cd $(System.DefaultWorkingDirectory)/drop/$(Build.BuildId)

                      # Extract the deployed package
                      unzip -q $(Build.BuildId).zip -d ./deployed

                      # Start the server for the main Express app on port 3000
                      cd ./deployed
                      npm install
                      npm run build
                      PORT=3000 node server.js &

                      # Start the React app in the /client folder on port 3001
                      cd ../deployed/client
                      npm install
                      npm run build
                      PORT=3001 serve -s build &

                      # Start the React app in the /admin folder on port 3002
                      cd ../admin
                      npm install
                      npm run build
                      PORT=3002 serve -s build &
